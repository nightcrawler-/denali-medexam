 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/employee_examination_sessions", type: :request do
  # EmployeeExaminationSession. As you add validations to EmployeeExaminationSession, be sure to
  # adjust the attributes here as well.
  let(:user) { User.create!(email: "me@you.com", password: "password123") }

  before(:each) do

    sign_in user 

    @practitioner = Practitioner.create!(
      name: "Jeane Aiko",
      address:"123 Kansas",
      email: "one@one",
      location: "12 Kingstons",
      registration: "4554 KE",
      phone: "07230065561"
    )

    @workplace =  Workplace.create!(
      address: "MyString",
      email: "me@gmail.com",
      location: "MyString",
      name: "MyString",
      phone: "MyString",
      registration: "MyString",
      practitioner_id: @practitioner.id
    )

    @employee = Employee.create!(
      address: "MyString",
      gender: 0,
      name: "Veronica Mars",
      pn: "MyString",
      national_id: "MyString",
      workplace: @workplace,
      dob: Date.yesterday
    )

    @examination_session = ExaminationSession.create!(
      examination_type: "MyString",
      workplace: @workplace,
      date_of_exam: Date.yesterday,
      health_risk: "idiet",
      id:1
    )
  end
  
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      EmployeeExaminationSession.create! valid_attributes
      get employee_examination_sessions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      employee_examination_session = EmployeeExaminationSession.create! valid_attributes
      get employee_examination_session_url(employee_examination_session)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_employee_examination_session_url(examination_session_id: "1")
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      employee_examination_session = EmployeeExaminationSession.create! valid_attributes
      get edit_employee_examination_session_url(employee_examination_session)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new EmployeeExaminationSession" do
        expect {
          post employee_examination_sessions_url, params: { employee_examination_session: valid_attributes }
        }.to change(EmployeeExaminationSession, :count).by(1)
      end

      it "redirects to the created employee_examination_session" do
        post employee_examination_sessions_url, params: { employee_examination_session: valid_attributes }
        expect(response).to redirect_to(employee_examination_session_url(EmployeeExaminationSession.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new EmployeeExaminationSession" do
        expect {
          post employee_examination_sessions_url, params: { employee_examination_session: invalid_attributes }
        }.to change(EmployeeExaminationSession, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post employee_examination_sessions_url, params: { employee_examination_session: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested employee_examination_session" do
        employee_examination_session = EmployeeExaminationSession.create! valid_attributes
        patch employee_examination_session_url(employee_examination_session), params: { employee_examination_session: new_attributes }
        employee_examination_session.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the employee_examination_session" do
        employee_examination_session = EmployeeExaminationSession.create! valid_attributes
        patch employee_examination_session_url(employee_examination_session), params: { employee_examination_session: new_attributes }
        employee_examination_session.reload
        expect(response).to redirect_to(employee_examination_session_url(employee_examination_session))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        employee_examination_session = EmployeeExaminationSession.create! valid_attributes
        patch employee_examination_session_url(employee_examination_session), params: { employee_examination_session: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested employee_examination_session" do
      employee_examination_session = EmployeeExaminationSession.create! valid_attributes
      expect {
        delete employee_examination_session_url(employee_examination_session)
      }.to change(EmployeeExaminationSession, :count).by(-1)
    end

    it "redirects to the employee_examination_sessions list" do
      employee_examination_session = EmployeeExaminationSession.create! valid_attributes
      delete employee_examination_session_url(employee_examination_session)
      expect(response).to redirect_to(employee_examination_sessions_url)
    end
  end
end
